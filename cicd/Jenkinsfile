pipeline{
	agent {
		kubernetes{
			cloud "${params.cloudName}"
			label "backend-build"
			yamlFile "cicd/build-pods/BuildPod-kaniko.yaml"
		}
  }
	parameters{
		choice(
			choices: ['kubernetes','openshift'],
			description: 'Cloud Name',
			name: 'cloudName'
		)
/*		choice(
			choices: ['BuildPod-kaniko.yaml','BuildPod-buildah.yaml','BuildPod-docker.yaml'],
			description: 'Build Pod definition file.',
			name: 'buildPodFile'
		)
*/
		string(name: "imageRepository", description: "Container image repository")
	}
	stages{
		stage('Prepare'){
			steps{
				script{
					tag = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
				}
			}
		}
		stage('Build Bars'){
			steps{
				container('ace'){
					sh "bash -c 'mqsipackagebar -a compiled.bar -w . -k ApiCalculadora'"
				}
			}
   	}
		stage('Build Image with Kaniko'){
			environment{
				PATH="/busybox:/kaniko:$PATH"
				DESTINATION="${params.imageRepository}"
				TAG="${tag}"
				CLOUD="${params.cloudName}"
			}
			steps{
				container('kaniko'){
					sh '''#!/busybox/sh
								echo "Building $DESTINATION"
								if [ $CLOUD -eq "kubernetes" ]; then
									/kaniko/executor --dockerfile=Dockerfile --context="dir://`pwd`"  --destination="$DESTINATION:$TAG" --destination="$DESTINATION:latest"
								else
									/kaniko/executor --dockerfile=Dockerfile --context="dir://`pwd`"  --destination="$DESTINATION:$TAG" --destination="$DESTINATION:latest" --insecure
								fi
						 '''
				}
			}
		}
		stage('Deploy Image on Kubernetes'){
			environment{
				REPOSITORY="${params.imageRepository}"
				TAG="${tag}"
			}
			when{
				expression{params.cloudName == 'kubernetes'}
			}
			steps{
				container('helm'){
					sh '''#!/bin/sh
								/helm init --client-only
								/helm upgrade api charts/calculadora-api --namespace default --install --set image.repository=$REPOSITORY,image.tag=$TAG,service.type=NodePort
						 '''
				}
			}
		}
/*
		stage('Deploy Image on Openshift'){
			environment{
				REPOSITORY="${params.imageRepository}"
				TAG="${tag}"
			}
			when{
				expression{params.cloudName == 'openshift'}
			}
			steps{
				container('origin'){
					openshift.withCluster(){
						openshift.withProject(){
							def deployment = openshift.selector('dc',[template: 'calculadora-api', app: 'api'])
							if(!deployment.exists()){
								def model = openshift.process('-f','oc/template.yaml')
								openshift.apply(model)
								deployment = openshift.selector('dc',[template: 'calculadora-api', app: 'api'])
							}
							
						}
					}
				}
			}
		}
*/
	}
}