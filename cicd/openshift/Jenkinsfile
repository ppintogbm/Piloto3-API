pipeline{
	agent {
		kubernetes{
			cloud "openshift"
			label "api-build"
			yamlFile  "cicd/openshift/pod-kaniko.yaml"		
    }
  }
	parameters{
    string(name: "app", description: "Application Name overrides")
	}
	stages{
		stage('Prepare'){
			steps{
				script{
					env.tag = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
				}
				container('origin'){
					script{
						openshift.withCluster(){
							openshift.withProject(){
								def imagestream = openshift.selector("imagestream/${params.app}-api")
								if(!imagestream.exists()){
									imagestream = openshift.apply([apiVersion: 'v1',kind: 'ImageStream', metadata: [name: "${params.app}-api", labels: [app: "${params.app}" ]]])
								}
								env.imagestream = imagestream.object()
								env.repository = imagestream.object().status.dockerImageRepository
								env.registry = env.repository.split("/")[0]
								echo "API image repo: ${env.repository}"
							}
						}
					}
				}
			}
		}
		stage('Build Bars'){
			steps{
				container('ace'){
					sh "bash -c 'mqsipackagebar -a compiled.bar -w . -k ApiCalculadora'"
				}
			}
   	}
		stage('Build Image'){
			environment{
				REGISTRY="${env.registry}"
				REPOSITORY="${env.repository}"
				TAG="${env.tag}"
			}
			steps{
				container('kaniko'){
					sh 	'''#!/busybox/sh
								mkdir -pv /kaniko/.docker
								echo "{\\"auths\\":{\\"$REGISTRY\\":{\\"username\\":\\"openshift\\",\\"password\\":\\"$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)\\"}}}" | tee /kaniko/.docker/config.json
								echo "Building $REPOSITORY"
								/kaniko/executor --context="dir://`pwd`" --destination=$REPOSITORY:$TAG --cleanup --cache=true --cache-ttl=24h
								/kaniko/executor --context="dir://`pwd`/init" --dockerfile="`pwd`/init/Dockerfile" --destination=$REPOSITORY-init:$TAG --cleanup --cache=true --cache-ttl=24h
						'''
				}
			}
		}
		stage('Deploy Image on Openshift'){
			steps{
				container('origin'){
          script{
            openshift.withCluster(){
              openshift.withProject(){
                def applicationName = !params.appOverride? "calculadora":params.appOverride
                def deployment = openshift.selector('dc',[template: 'calculadora-api', app: applicationName])
                if(!deployment.exists()){
                  echo "Deploying application component: api, with Application name: ${applicationName}..."
                  openshift.apply(openshift.process("-f","templates/template.yaml","-p=APP=${applicationName}","-p=IMAGE=${params.app}-api"))
                  deployment = openshift.selector('dc',[template: 'calculadora-api', app: applicationName])
                }
								// get db service
								def dbService =  openshift.selector('svc',[template: 'calculadora-db', app: applicationName])
								if(dbService.exists()){
									dbService.Object.dump()
									def dbServiceName = dbService.object().metadata.name
									def dcObject = deployment.object()
									dcObject.spec.template.initContainers.each{ i,container ->
										if(container.name == 'prepare-configs'){
											dcObject.spec.template.initContainers[i].envs.each{j,env ->
												if(env.name == 'DB_SERVICE_NAME'){
													dcObject.spec.template.initContainers[i].envs[j].value = dbServiceName
												}
												elseif(env.name == 'DB_PASSWORD'){
													dcObject.spec.template.initContainers[i].envs[j].remove("value")
													dcObject.spec.template.initContainers[i].envs[j].valueFrom.secretKeyRef = [name: dbServiceName, key: 'password']
												}
												elseif(env.name == 'DB_NAME'){
													dcObject.spec.template.initContainers[i].envs[j].remove("value")
													dcObject.spec.template.initContainers[i].envs[j].valueFrom.configMapKeyRef = [name: dbServiceName, key: 'dbname']
												}
											}
										}
									}
									openshift.apply(dcObject)
									deployment = openshift.selector('dc',[template: 'calculadora-api', app: applicationName])
								}
								openshift.tag("${env.imagestream.metadata.name}:${env.tag}","${env.imagestream.metadata.name}:latest")
								openshift.tag("${env.imagestream.metadata.name}-init:${env.tag}","${env.imagestream.metadata.name}-init:latest")
                def latestVersion = deployment.object().status.latestVersion
                def deploymentName = deployment.object().metadata.name
                echo "Checking application component status: ${latestVersion}..."
                def rc = openshift.selector('rc',"${deploymentName}-${latestVersion}")
                timeout(time:10, unit: 'MINUTES'){
                  rc.untilEach(1){
                    def rcMap = it.object()
                    return (rcMap.status.replicas.equals(rcMap.status.readyReplicas))
                  }
                }
              }
            }
          }
				}
			}
		}
	}
}