pipeline{
	agent {
		kubernetes{
			cloud "openshift"
			label "backend-build"
			yaml """
apiVersion: v1
kind: Pod
metadata:
  labels: 
    app: jenkins-ephemeral
spec:
  serviceAccount: jenkins
  volumes:
    - name: docker-credentials
      secret:
        secretName: ${jenkinsDockerSecret}
    - name: docker-sock
      hostPath:
        path: /var/run/docker.sock
  containers:
    - name: origin
      image: openshift/origin-cli
      command:
        - cat
      tty: true
      resources:
        requests:
          cpu: "100m"
          memory: "32Mi"
        limits:
          cpu: "1000m"
          memory: "512Mi"
      volumeMounts:
        - name: docker-credentials
          mountPath: /.docker
    - name: docker
      image: docker:1.13.1
      imagePullPolicy: Always
      command:
        - cat
      tty: true
      volumeMounts:
        - mountPath: /var/run/docker.sock
          name: docker-sock
        - mountPath: /home/jenkins/.docker
          name: docker-credentials
      securityContext:
        allowPrivilegeEscalation: true
        privileged: true
      resources:
        requests:
          cpu: "100m"
          memory: "512Mi"
        limits:
          cpu: "2000m"
          memory: "2048Mi"
    - name: ace
      image: ibmcom/ace
      command: 
        - "/bin/bash"
        - "-c"
      args: 
        - cat
      tty: true
      resources:
        requests:
          memory: "512Mi"
          cpu: "500m"
        limits:
          memory: "2048Mi"
          cpu:  "2000m"
      env:
        - name: LICENSE
          value: "accept"
      securityContext:
        allowPrivilegeEscalation: false
        readOnlyRootFilesystem: false
        runAsNonRoot: true
        runAsUser: 1000
        privileged: false
        capabilities:
          add:
          - SETPCAP
          - AUDIT_WRITE
          - CHOWN
          - NET_RAW
          - DAC_OVERRIDE
          - FOWNER
          - FSETID
          - KILL
          - SETUID
          - SETGID
          - NET_BIND_SERVICE
          - SYS_CHROOT
          - SETFCAP
"""
		}
  }
	parameters{
		string(name: "imageRepository", description: "Container image repository", defaultValue: "docker-registry.default.svc.cluster.local:5000/piloto3/api")
		string(name: "jenkinsDockerSecret", description: "Jenkins Dockercfg Secret")
	}
	stages{
		stage('Prepare'){
			steps{
				script{
					tag = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
				}
			}
		}
		stage('Build Bars'){
			steps{
				container('ace'){
					sh "bash -c 'mqsipackagebar -a compiled.bar -w . -k ApiCalculadora'"
				}
			}
   	}
		stage('Build Image'){
			environment{
				DESTINATION="${params.imageRepository}"
				TAG="${tag}"
				CLOUD="${params.cloudName}"
			}
			steps{
				container('docker'){
					sh '''#!/bin/sh
								echo "Building $DESTINATION with user $(whoami)"
                docker login -u $(whoami) -p $(cat /var/run/secrets/kubernetes.io/serviceaccount/token) $DESTINATION
								docker build -t $DESTINATION:$TAG -t $DESTINATION:latest .
                docker push $DESTINATION:$TAG
						 '''
				}
			}
		}
		stage('Deploy Image on Openshift'){
			environment{
				REPOSITORY="${params.imageRepository}"
				TAG="${tag}"
			}
			when{
				expression{params.cloudName == 'openshift'}
			}
			steps{
				container('origin'){
          script{
            openshift.withCluster(){
              openshift.withProject(){
                def deployment = openshift.selector('dc',[template: 'calculadora-api', app: 'api'])
                if(!deployment.exists()){
                  def model = openshift.process('-f','templates/template.yaml',"-p","NAME=api")
                  openshift.apply(model)
                  deployment = openshift.selector('dc',[template: 'calculadora-api', app: 'api'])
                }
                oc.tag("${params.imageRepository}:${tag}","${params.imageRepository}:latest")
                def latestVersion = deployment.object().status.latestVersion
                def rc = openshift.selector('rc',"${app}-${latestVersion}")
                timeout(time:1, unit: 'MINUTES'){
                  rc.untilEach(1){
                    def rcMap = it.object()
                    return (rcMap.status.replicas.equals(rcMap.status.readyReplicas))
                  }
                }
              }
            }
          }
				}
			}
		}
	}
}